// Code generated by protoc-gen-go.
// source: wysteria.grpc.proto
// DO NOT EDIT!

/*
Package wysteria_grpc is a generated protocol buffer package.

It is generated from these files:
	wysteria.grpc.proto

It has these top-level messages:
	IdAndDict
	Id
	Text
	Collection
	Item
	Version
	Resource
	Link
	QueryDesc
	QueryDescs
	Ids
	Collections
	Items
	Versions
	Resources
	Links
*/
package wysteria_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IdAndDict struct {
	Id     string            `protobuf:"bytes,96,opt,name=Id" json:"Id,omitempty"`
	Facets map[string]string `protobuf:"bytes,97,rep,name=Facets" json:"Facets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *IdAndDict) Reset()                    { *m = IdAndDict{} }
func (m *IdAndDict) String() string            { return proto.CompactTextString(m) }
func (*IdAndDict) ProtoMessage()               {}
func (*IdAndDict) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IdAndDict) GetFacets() map[string]string {
	if m != nil {
		return m.Facets
	}
	return nil
}

type Id struct {
	Id    string `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	Error *Text  `protobuf:"bytes,81,opt,name=error" json:"error,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Text struct {
	Text string `protobuf:"bytes,80,opt,name=Text" json:"Text,omitempty"`
}

func (m *Text) Reset()                    { *m = Text{} }
func (m *Text) String() string            { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()               {}
func (*Text) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Collection struct {
	Id    string `protobuf:"bytes,6,opt,name=Id" json:"Id,omitempty"`
	Name  string `protobuf:"bytes,7,opt,name=Name" json:"Name,omitempty"`
	Error *Text  `protobuf:"bytes,82,opt,name=error" json:"error,omitempty"`
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Collection) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Item struct {
	Parent   string            `protobuf:"bytes,12,opt,name=Parent" json:"Parent,omitempty"`
	Id       string            `protobuf:"bytes,13,opt,name=Id" json:"Id,omitempty"`
	ItemType string            `protobuf:"bytes,14,opt,name=ItemType" json:"ItemType,omitempty"`
	Variant  string            `protobuf:"bytes,15,opt,name=Variant" json:"Variant,omitempty"`
	Facets   map[string]string `protobuf:"bytes,16,rep,name=Facets" json:"Facets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Links    []string          `protobuf:"bytes,17,rep,name=Links" json:"Links,omitempty"`
	Error    *Text             `protobuf:"bytes,83,opt,name=error" json:"error,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Item) GetFacets() map[string]string {
	if m != nil {
		return m.Facets
	}
	return nil
}

func (m *Item) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Version struct {
	Parent    string            `protobuf:"bytes,25,opt,name=Parent" json:"Parent,omitempty"`
	Id        string            `protobuf:"bytes,26,opt,name=Id" json:"Id,omitempty"`
	Number    int32             `protobuf:"varint,27,opt,name=Number" json:"Number,omitempty"`
	Facets    map[string]string `protobuf:"bytes,29,rep,name=Facets" json:"Facets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Links     []string          `protobuf:"bytes,30,rep,name=Links" json:"Links,omitempty"`
	Resources []string          `protobuf:"bytes,31,rep,name=Resources" json:"Resources,omitempty"`
	Error     *Text             `protobuf:"bytes,84,opt,name=error" json:"error,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Version) GetFacets() map[string]string {
	if m != nil {
		return m.Facets
	}
	return nil
}

func (m *Version) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Resource struct {
	Parent       string `protobuf:"bytes,36,opt,name=Parent" json:"Parent,omitempty"`
	Name         string `protobuf:"bytes,37,opt,name=Name" json:"Name,omitempty"`
	ResourceType string `protobuf:"bytes,38,opt,name=ResourceType" json:"ResourceType,omitempty"`
	Id           string `protobuf:"bytes,39,opt,name=Id" json:"Id,omitempty"`
	Location     string `protobuf:"bytes,40,opt,name=Location" json:"Location,omitempty"`
	Error        *Text  `protobuf:"bytes,85,opt,name=error" json:"error,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (m *Resource) String() string            { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Resource) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Link struct {
	Name  string `protobuf:"bytes,43,opt,name=Name" json:"Name,omitempty"`
	Id    string `protobuf:"bytes,44,opt,name=Id" json:"Id,omitempty"`
	Src   string `protobuf:"bytes,45,opt,name=Src" json:"Src,omitempty"`
	Dst   string `protobuf:"bytes,46,opt,name=Dst" json:"Dst,omitempty"`
	Error *Text  `protobuf:"bytes,85,opt,name=error" json:"error,omitempty"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Link) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type QueryDesc struct {
	Parent        string            `protobuf:"bytes,60,opt,name=Parent" json:"Parent,omitempty"`
	Id            string            `protobuf:"bytes,61,opt,name=Id" json:"Id,omitempty"`
	VersionNumber int32             `protobuf:"varint,62,opt,name=VersionNumber" json:"VersionNumber,omitempty"`
	ItemType      string            `protobuf:"bytes,63,opt,name=ItemType" json:"ItemType,omitempty"`
	Variant       string            `protobuf:"bytes,64,opt,name=Variant" json:"Variant,omitempty"`
	Facets        map[string]string `protobuf:"bytes,65,rep,name=Facets" json:"Facets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name          string            `protobuf:"bytes,66,opt,name=Name" json:"Name,omitempty"`
	ResourceType  string            `protobuf:"bytes,67,opt,name=ResourceType" json:"ResourceType,omitempty"`
	Location      string            `protobuf:"bytes,68,opt,name=Location" json:"Location,omitempty"`
	LinkSrc       string            `protobuf:"bytes,69,opt,name=LinkSrc" json:"LinkSrc,omitempty"`
	LinkDst       string            `protobuf:"bytes,70,opt,name=LinkDst" json:"LinkDst,omitempty"`
}

func (m *QueryDesc) Reset()                    { *m = QueryDesc{} }
func (m *QueryDesc) String() string            { return proto.CompactTextString(m) }
func (*QueryDesc) ProtoMessage()               {}
func (*QueryDesc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryDesc) GetFacets() map[string]string {
	if m != nil {
		return m.Facets
	}
	return nil
}

type QueryDescs struct {
	All []*QueryDesc `protobuf:"bytes,75,rep,name=all" json:"all,omitempty"`
}

func (m *QueryDescs) Reset()                    { *m = QueryDescs{} }
func (m *QueryDescs) String() string            { return proto.CompactTextString(m) }
func (*QueryDescs) ProtoMessage()               {}
func (*QueryDescs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryDescs) GetAll() []*QueryDesc {
	if m != nil {
		return m.All
	}
	return nil
}

type Ids struct {
	All   []*Id `protobuf:"bytes,50,rep,name=all" json:"all,omitempty"`
	Error *Text `protobuf:"bytes,88,opt,name=error" json:"error,omitempty"`
}

func (m *Ids) Reset()                    { *m = Ids{} }
func (m *Ids) String() string            { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()               {}
func (*Ids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Ids) GetAll() []*Id {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *Ids) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Collections struct {
	All   []*Collection `protobuf:"bytes,51,rep,name=all" json:"all,omitempty"`
	Error *Text         `protobuf:"bytes,89,opt,name=error" json:"error,omitempty"`
}

func (m *Collections) Reset()                    { *m = Collections{} }
func (m *Collections) String() string            { return proto.CompactTextString(m) }
func (*Collections) ProtoMessage()               {}
func (*Collections) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Collections) GetAll() []*Collection {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *Collections) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Items struct {
	All   []*Item `protobuf:"bytes,52,rep,name=all" json:"all,omitempty"`
	Error *Text   `protobuf:"bytes,90,opt,name=error" json:"error,omitempty"`
}

func (m *Items) Reset()                    { *m = Items{} }
func (m *Items) String() string            { return proto.CompactTextString(m) }
func (*Items) ProtoMessage()               {}
func (*Items) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Items) GetAll() []*Item {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *Items) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Versions struct {
	All   []*Version `protobuf:"bytes,53,rep,name=all" json:"all,omitempty"`
	Error *Text      `protobuf:"bytes,91,opt,name=error" json:"error,omitempty"`
}

func (m *Versions) Reset()                    { *m = Versions{} }
func (m *Versions) String() string            { return proto.CompactTextString(m) }
func (*Versions) ProtoMessage()               {}
func (*Versions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Versions) GetAll() []*Version {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *Versions) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Resources struct {
	All   []*Resource `protobuf:"bytes,54,rep,name=all" json:"all,omitempty"`
	Error *Text       `protobuf:"bytes,92,opt,name=error" json:"error,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Resources) GetAll() []*Resource {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *Resources) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

type Links struct {
	All   []*Link `protobuf:"bytes,55,rep,name=all" json:"all,omitempty"`
	Error *Text   `protobuf:"bytes,93,opt,name=error" json:"error,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Links) GetAll() []*Link {
	if m != nil {
		return m.All
	}
	return nil
}

func (m *Links) GetError() *Text {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*IdAndDict)(nil), "wysteria_grpc.IdAndDict")
	proto.RegisterType((*Id)(nil), "wysteria_grpc.Id")
	proto.RegisterType((*Text)(nil), "wysteria_grpc.Text")
	proto.RegisterType((*Collection)(nil), "wysteria_grpc.Collection")
	proto.RegisterType((*Item)(nil), "wysteria_grpc.Item")
	proto.RegisterType((*Version)(nil), "wysteria_grpc.Version")
	proto.RegisterType((*Resource)(nil), "wysteria_grpc.Resource")
	proto.RegisterType((*Link)(nil), "wysteria_grpc.Link")
	proto.RegisterType((*QueryDesc)(nil), "wysteria_grpc.QueryDesc")
	proto.RegisterType((*QueryDescs)(nil), "wysteria_grpc.QueryDescs")
	proto.RegisterType((*Ids)(nil), "wysteria_grpc.Ids")
	proto.RegisterType((*Collections)(nil), "wysteria_grpc.Collections")
	proto.RegisterType((*Items)(nil), "wysteria_grpc.Items")
	proto.RegisterType((*Versions)(nil), "wysteria_grpc.Versions")
	proto.RegisterType((*Resources)(nil), "wysteria_grpc.Resources")
	proto.RegisterType((*Links)(nil), "wysteria_grpc.Links")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WysteriaGrpc service

type WysteriaGrpcClient interface {
	CreateCollection(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Id, error)
	CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Id, error)
	CreateVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Id, error)
	CreateResource(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Id, error)
	CreateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Id, error)
	DeleteCollection(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error)
	DeleteItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error)
	DeleteVersion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error)
	DeleteResource(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error)
	FindCollections(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Collections, error)
	FindItems(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Items, error)
	FindVersions(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Versions, error)
	FindResources(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Resources, error)
	FindLinks(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Links, error)
	GetPublishedVersion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Version, error)
	PublishVersion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error)
	UpdateVersionFacets(ctx context.Context, in *IdAndDict, opts ...grpc.CallOption) (*Text, error)
	UpdateItemFacets(ctx context.Context, in *IdAndDict, opts ...grpc.CallOption) (*Text, error)
}

type wysteriaGrpcClient struct {
	cc *grpc.ClientConn
}

func NewWysteriaGrpcClient(cc *grpc.ClientConn) WysteriaGrpcClient {
	return &wysteriaGrpcClient{cc}
}

func (c *wysteriaGrpcClient) CreateCollection(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/CreateCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/CreateItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) CreateVersion(ctx context.Context, in *Version, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/CreateVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) CreateResource(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/CreateResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) CreateLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/CreateLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) DeleteCollection(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/DeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) DeleteItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/DeleteItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) DeleteVersion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/DeleteVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) DeleteResource(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/DeleteResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) FindCollections(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Collections, error) {
	out := new(Collections)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/FindCollections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) FindItems(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/FindItems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) FindVersions(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Versions, error) {
	out := new(Versions)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/FindVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) FindResources(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Resources, error) {
	out := new(Resources)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/FindResources", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) FindLinks(ctx context.Context, in *QueryDescs, opts ...grpc.CallOption) (*Links, error) {
	out := new(Links)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/FindLinks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) GetPublishedVersion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/GetPublishedVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) PublishVersion(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/PublishVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) UpdateVersionFacets(ctx context.Context, in *IdAndDict, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/UpdateVersionFacets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wysteriaGrpcClient) UpdateItemFacets(ctx context.Context, in *IdAndDict, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := grpc.Invoke(ctx, "/wysteria_grpc.WysteriaGrpc/UpdateItemFacets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WysteriaGrpc service

type WysteriaGrpcServer interface {
	CreateCollection(context.Context, *Text) (*Id, error)
	CreateItem(context.Context, *Item) (*Id, error)
	CreateVersion(context.Context, *Version) (*Id, error)
	CreateResource(context.Context, *Resource) (*Id, error)
	CreateLink(context.Context, *Link) (*Id, error)
	DeleteCollection(context.Context, *Id) (*Text, error)
	DeleteItem(context.Context, *Id) (*Text, error)
	DeleteVersion(context.Context, *Id) (*Text, error)
	DeleteResource(context.Context, *Id) (*Text, error)
	FindCollections(context.Context, *QueryDescs) (*Collections, error)
	FindItems(context.Context, *QueryDescs) (*Items, error)
	FindVersions(context.Context, *QueryDescs) (*Versions, error)
	FindResources(context.Context, *QueryDescs) (*Resources, error)
	FindLinks(context.Context, *QueryDescs) (*Links, error)
	GetPublishedVersion(context.Context, *Id) (*Version, error)
	PublishVersion(context.Context, *Id) (*Text, error)
	UpdateVersionFacets(context.Context, *IdAndDict) (*Text, error)
	UpdateItemFacets(context.Context, *IdAndDict) (*Text, error)
}

func RegisterWysteriaGrpcServer(s *grpc.Server, srv WysteriaGrpcServer) {
	s.RegisterService(&_WysteriaGrpc_serviceDesc, srv)
}

func _WysteriaGrpc_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).CreateCollection(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).CreateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_CreateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Version)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).CreateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/CreateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).CreateVersion(ctx, req.(*Version))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).CreateResource(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).CreateLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).DeleteCollection(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).DeleteItem(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/DeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).DeleteVersion(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).DeleteResource(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_FindCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).FindCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/FindCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).FindCollections(ctx, req.(*QueryDescs))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_FindItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).FindItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/FindItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).FindItems(ctx, req.(*QueryDescs))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_FindVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).FindVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/FindVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).FindVersions(ctx, req.(*QueryDescs))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_FindResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).FindResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/FindResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).FindResources(ctx, req.(*QueryDescs))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_FindLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDescs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).FindLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/FindLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).FindLinks(ctx, req.(*QueryDescs))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_GetPublishedVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).GetPublishedVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/GetPublishedVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).GetPublishedVersion(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_PublishVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).PublishVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/PublishVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).PublishVersion(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_UpdateVersionFacets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndDict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).UpdateVersionFacets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/UpdateVersionFacets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).UpdateVersionFacets(ctx, req.(*IdAndDict))
	}
	return interceptor(ctx, in, info, handler)
}

func _WysteriaGrpc_UpdateItemFacets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndDict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WysteriaGrpcServer).UpdateItemFacets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wysteria_grpc.WysteriaGrpc/UpdateItemFacets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WysteriaGrpcServer).UpdateItemFacets(ctx, req.(*IdAndDict))
	}
	return interceptor(ctx, in, info, handler)
}

var _WysteriaGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wysteria_grpc.WysteriaGrpc",
	HandlerType: (*WysteriaGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _WysteriaGrpc_CreateCollection_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _WysteriaGrpc_CreateItem_Handler,
		},
		{
			MethodName: "CreateVersion",
			Handler:    _WysteriaGrpc_CreateVersion_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _WysteriaGrpc_CreateResource_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _WysteriaGrpc_CreateLink_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _WysteriaGrpc_DeleteCollection_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _WysteriaGrpc_DeleteItem_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _WysteriaGrpc_DeleteVersion_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _WysteriaGrpc_DeleteResource_Handler,
		},
		{
			MethodName: "FindCollections",
			Handler:    _WysteriaGrpc_FindCollections_Handler,
		},
		{
			MethodName: "FindItems",
			Handler:    _WysteriaGrpc_FindItems_Handler,
		},
		{
			MethodName: "FindVersions",
			Handler:    _WysteriaGrpc_FindVersions_Handler,
		},
		{
			MethodName: "FindResources",
			Handler:    _WysteriaGrpc_FindResources_Handler,
		},
		{
			MethodName: "FindLinks",
			Handler:    _WysteriaGrpc_FindLinks_Handler,
		},
		{
			MethodName: "GetPublishedVersion",
			Handler:    _WysteriaGrpc_GetPublishedVersion_Handler,
		},
		{
			MethodName: "PublishVersion",
			Handler:    _WysteriaGrpc_PublishVersion_Handler,
		},
		{
			MethodName: "UpdateVersionFacets",
			Handler:    _WysteriaGrpc_UpdateVersionFacets_Handler,
		},
		{
			MethodName: "UpdateItemFacets",
			Handler:    _WysteriaGrpc_UpdateItemFacets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("wysteria.grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x57, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xae, 0xed, 0xc4, 0x89, 0x4f, 0xe2, 0xd4, 0x1d, 0x57, 0xe9, 0x64, 0xb9, 0xd4, 0x5a, 0x52,
	0x30, 0x14, 0xfc, 0x90, 0x42, 0x2f, 0x51, 0x68, 0x69, 0xb3, 0x75, 0x65, 0xa8, 0xaa, 0xd4, 0x49,
	0x0a, 0xa5, 0xa0, 0xb2, 0xd9, 0x1d, 0x81, 0x55, 0xc7, 0xb6, 0x66, 0xc6, 0x80, 0xff, 0x04, 0xe2,
	0x81, 0x17, 0x9e, 0xf8, 0x0d, 0xfc, 0x43, 0x34, 0x97, 0x9d, 0xbd, 0x64, 0xd6, 0xeb, 0x10, 0xf5,
	0xc9, 0x3b, 0x97, 0xef, 0x3b, 0x67, 0xbe, 0xf3, 0xcd, 0x19, 0x19, 0x9a, 0xbf, 0xcd, 0x18, 0x27,
	0x74, 0xe0, 0x77, 0x7e, 0xa6, 0x93, 0xa0, 0x33, 0xa1, 0x63, 0x3e, 0x46, 0xf5, 0x68, 0xf2, 0xb5,
	0x98, 0x74, 0xff, 0x2a, 0x41, 0xad, 0x17, 0x3e, 0x1c, 0x85, 0xde, 0x20, 0xe0, 0x68, 0x03, 0xca,
	0xbd, 0x10, 0xff, 0xd4, 0x2a, 0xb5, 0x6b, 0xfd, 0x72, 0x2f, 0x44, 0x7b, 0x50, 0xed, 0xfa, 0x01,
	0xe1, 0x0c, 0xfb, 0xad, 0x4a, 0x7b, 0x6d, 0x67, 0xbb, 0x93, 0x42, 0x77, 0x0c, 0xb2, 0xa3, 0xb6,
	0x3d, 0x1e, 0x71, 0x3a, 0xeb, 0x6b, 0x8c, 0x73, 0x0f, 0xd6, 0x12, 0xd3, 0xa8, 0x01, 0x95, 0x37,
	0x64, 0x86, 0x4b, 0x92, 0x5d, 0x7c, 0xa2, 0xab, 0xb0, 0xfc, 0xab, 0x3f, 0x9c, 0x12, 0x5c, 0x96,
	0x73, 0x6a, 0xb0, 0x5b, 0xbe, 0x5b, 0x72, 0x1f, 0x88, 0x44, 0x74, 0x3a, 0x25, 0x93, 0xce, 0xc7,
	0xb0, 0x4c, 0x28, 0x1d, 0x53, 0xfc, 0xbc, 0x55, 0x6a, 0xaf, 0xed, 0x34, 0x33, 0xd9, 0x1c, 0x91,
	0xdf, 0x79, 0x5f, 0xed, 0x70, 0x1d, 0x58, 0x12, 0x43, 0x84, 0xd4, 0x2f, 0x3e, 0x90, 0x24, 0xf2,
	0xdb, 0x7d, 0x05, 0xb0, 0x3f, 0x1e, 0x0e, 0x49, 0xc0, 0x07, 0xe3, 0x91, 0x0e, 0x52, 0x35, 0x41,
	0x10, 0x2c, 0x3d, 0xf3, 0x4f, 0x09, 0x5e, 0x51, 0x08, 0xf1, 0x1d, 0x07, 0xee, 0x17, 0x06, 0xfe,
	0xbb, 0x0c, 0x4b, 0x3d, 0x4e, 0x4e, 0xd1, 0x26, 0x54, 0x0f, 0x7c, 0x4a, 0x46, 0x1c, 0xaf, 0x4b,
	0x26, 0x3d, 0xd2, 0xf1, 0xea, 0x26, 0x9e, 0x03, 0xab, 0x62, 0xff, 0xd1, 0x6c, 0x42, 0xf0, 0x86,
	0x9c, 0x35, 0x63, 0x84, 0x61, 0xe5, 0x85, 0x4f, 0x07, 0xfe, 0x88, 0xe3, 0xcb, 0x72, 0x29, 0x1a,
	0xa2, 0x3b, 0xa6, 0x32, 0x0d, 0x59, 0x99, 0xeb, 0xd9, 0xca, 0x70, 0x72, 0x6a, 0x2b, 0x8a, 0xd0,
	0xfc, 0xe9, 0x60, 0xf4, 0x86, 0xe1, 0x2b, 0xad, 0x8a, 0xd0, 0x5c, 0x0e, 0xe2, 0x03, 0x1e, 0x16,
	0x1d, 0xf0, 0x22, 0x55, 0xfd, 0xa7, 0x0c, 0x2b, 0x2f, 0x08, 0x65, 0x42, 0xf6, 0x58, 0x9e, 0x2d,
	0x8b, 0x3c, 0x8e, 0x91, 0x67, 0x13, 0xaa, 0xcf, 0xa6, 0xa7, 0x27, 0x84, 0xe2, 0x77, 0x5a, 0xa5,
	0xf6, 0x72, 0x5f, 0x8f, 0xd0, 0xae, 0x11, 0xe0, 0x3d, 0x29, 0x80, 0x9b, 0x49, 0x59, 0xc7, 0x99,
	0xaf, 0xc1, 0xfb, 0x49, 0x0d, 0xde, 0x85, 0x5a, 0x9f, 0xb0, 0xf1, 0x94, 0x06, 0x84, 0xe1, 0xeb,
	0x72, 0x25, 0x9e, 0x88, 0x15, 0x3a, 0x7a, 0x9b, 0x0a, 0xfd, 0x5b, 0x82, 0xd5, 0x28, 0x66, 0x42,
	0xa2, 0xed, 0x94, 0x44, 0x91, 0x43, 0x6f, 0x24, 0x1c, 0xea, 0xc2, 0x7a, 0x84, 0x93, 0x4e, 0xfa,
	0x50, 0xae, 0xa5, 0xe6, 0xb4, 0xb4, 0x1f, 0x25, 0x9d, 0xf7, 0x74, 0x1c, 0xf8, 0xe2, 0x16, 0xe0,
	0xb6, 0x72, 0x5e, 0x34, 0x8e, 0x8f, 0x7b, 0x5c, 0xe8, 0xf8, 0x19, 0x2c, 0x09, 0x01, 0x4d, 0x5a,
	0x37, 0x13, 0x69, 0xa9, 0x90, 0x9f, 0x9a, 0x90, 0x0d, 0xa8, 0x1c, 0xd2, 0x00, 0x7f, 0xa6, 0xb4,
	0x38, 0xa4, 0x81, 0x98, 0xf1, 0x18, 0xc7, 0x1d, 0x35, 0xe3, 0x31, 0x7e, 0x9e, 0xd0, 0x7f, 0x56,
	0xa0, 0xf6, 0x7c, 0x4a, 0xe8, 0xcc, 0x23, 0x2c, 0x48, 0xe8, 0xb5, 0x67, 0xb1, 0xd4, 0x97, 0x26,
	0x89, 0x6d, 0xa8, 0x6b, 0x77, 0x68, 0x67, 0xdd, 0x97, 0xce, 0x4a, 0x4f, 0xa6, 0xee, 0xe5, 0x83,
	0xfc, 0x7b, 0xf9, 0x55, 0xfa, 0x5e, 0xc6, 0x1d, 0xf3, 0xa1, 0xb5, 0x63, 0x9a, 0x6c, 0xad, 0xc6,
	0x8c, 0x24, 0x7c, 0x34, 0xa7, 0xb2, 0xfb, 0x96, 0xca, 0x26, 0x2b, 0xe9, 0x65, 0x2a, 0x89, 0x61,
	0x45, 0x94, 0x47, 0xc8, 0xfe, 0x58, 0xe5, 0xaa, 0x87, 0xd1, 0x8a, 0x90, 0xbf, 0x1b, 0xaf, 0x78,
	0x8c, 0x5f, 0xc4, 0xc1, 0x77, 0x01, 0xcc, 0x19, 0x19, 0xfa, 0x04, 0x2a, 0xfe, 0x70, 0x88, 0xbf,
	0x91, 0x5a, 0xe0, 0x3c, 0x2d, 0xfa, 0x62, 0x93, 0x7b, 0x0c, 0x95, 0x5e, 0xc8, 0xd0, 0x07, 0x0a,
	0xb2, 0x23, 0x21, 0x57, 0xce, 0x3c, 0x38, 0x72, 0x6f, 0xec, 0x91, 0xef, 0x0a, 0x3d, 0x42, 0x60,
	0x2d, 0xee, 0xf6, 0x0c, 0xdd, 0x54, 0xf4, 0xb7, 0x24, 0xfd, 0x56, 0x06, 0x17, 0x6f, 0xcc, 0x84,
	0x79, 0x59, 0x18, 0xe6, 0x25, 0x2c, 0x0b, 0x7b, 0x30, 0x74, 0x43, 0x05, 0xf8, 0x5c, 0x06, 0x68,
	0x5a, 0xda, 0x72, 0x86, 0xfa, 0xfb, 0x42, 0xea, 0xd7, 0xb0, 0xaa, 0xad, 0xc9, 0x50, 0x5b, 0xb1,
	0x7f, 0x21, 0xd9, 0x37, 0xed, 0x3d, 0x2f, 0x13, 0xe0, 0x55, 0x61, 0x00, 0x1f, 0x52, 0x8d, 0x4e,
	0x46, 0xb8, 0x2d, 0x23, 0x5c, 0xcb, 0xa0, 0xa2, 0x6d, 0x99, 0x10, 0x3f, 0x2c, 0x22, 0x8f, 0xea,
	0xb2, 0x5a, 0x9e, 0x3b, 0x56, 0x79, 0xc4, 0x96, 0x0c, 0xf5, 0x8f, 0x45, 0xd4, 0x3b, 0x7f, 0xd4,
	0x60, 0xfd, 0x5b, 0xbd, 0xfa, 0x84, 0x4e, 0x02, 0xb4, 0x07, 0x8d, 0x7d, 0x4a, 0x7c, 0x4e, 0x12,
	0xaf, 0xbc, 0x8d, 0xc0, 0x39, 0xeb, 0x2e, 0xf7, 0x12, 0xba, 0x0d, 0xa0, 0xd0, 0xf2, 0x15, 0xb7,
	0x15, 0xd0, 0x8e, 0xdb, 0x83, 0xba, 0xc2, 0x99, 0x17, 0xce, 0x5e, 0x1d, 0x3b, 0xfa, 0x3e, 0x6c,
	0x28, 0xb4, 0xe9, 0xfe, 0x79, 0xd2, 0x17, 0x64, 0x2d, 0x5b, 0xb1, 0x4d, 0xd7, 0xbc, 0xac, 0x1b,
	0x1e, 0x19, 0x92, 0x94, 0x56, 0x67, 0x37, 0x3a, 0x36, 0xf9, 0x54, 0x54, 0x85, 0x96, 0x5a, 0x2d,
	0x8e, 0xbb, 0x07, 0x75, 0x85, 0x8b, 0xb4, 0x5a, 0x1c, 0xba, 0x0b, 0x1b, 0x0a, 0x6a, 0x84, 0x5a,
	0x1c, 0xfb, 0x35, 0x5c, 0xee, 0x0e, 0x46, 0x61, 0xb2, 0x1d, 0x6c, 0xe5, 0xf5, 0x24, 0xe6, 0x38,
	0xb9, 0xcd, 0x81, 0xc9, 0x82, 0xd5, 0x04, 0x97, 0xba, 0xf3, 0x73, 0x58, 0xae, 0x5a, 0x0c, 0x24,
	0xf0, 0x1e, 0xac, 0x0b, 0xbc, 0xb9, 0xd8, 0x73, 0x28, 0xae, 0xd9, 0x8d, 0x24, 0x58, 0xba, 0x50,
	0x17, 0x2c, 0xf1, 0xed, 0x9d, 0x43, 0x83, 0x73, 0x0c, 0x95, 0x38, 0x8d, 0xba, 0xa2, 0xe7, 0x38,
	0x8d, 0x04, 0xb8, 0x97, 0xd0, 0x23, 0x68, 0x3e, 0x21, 0xfc, 0x60, 0x7a, 0x32, 0x1c, 0xb0, 0x5f,
	0x48, 0x38, 0xa7, 0xac, 0x39, 0xb7, 0x42, 0x55, 0x56, 0x13, 0x9c, 0xdf, 0x15, 0x5d, 0x68, 0x1e,
	0x4f, 0xc2, 0xf8, 0xf2, 0xe9, 0xf7, 0x14, 0xe7, 0xfd, 0x5f, 0xc9, 0xe3, 0xd9, 0x87, 0x86, 0xe2,
	0x11, 0x65, 0xfa, 0x9f, 0x24, 0x27, 0x55, 0xf9, 0x4f, 0xeb, 0xd6, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x29, 0xc7, 0x8b, 0xb5, 0x80, 0x0d, 0x00, 0x00,
}
